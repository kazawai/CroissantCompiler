?start: statement+ -> interpret

    ?statement: assignment ";"
        | condition ";" -> condition
        | loop ";" -> loop
        | expression ";"
        | PRINT expression ";" -> print

    ?assignment: TYPE IDENTIFIER "=" expression -> initialization
        | TYPE IDENTIFIER -> declaration

    ?expression: comparison
        | arithmetic_op
        | string_e
        | boolean_e
        | list_e
        | variable

    ?block: "{" statement* "}"

    ?condition: "si" boolean_e "alors" block ("sinon" block)? -> if_else

    ?loop: "tant" "que" boolean_e "faire" block -> while
        | "pour" "chaque" TYPE IDENTIFIER "dans" expression "faire" block -> for

    ?comparison: expression ("vaut" | "==") expression -> equals
        | expression ("ne vaut pas" | "!=") expression -> not_equal
        | expression "<=" expression -> less_equal
        | expression ">=" expression -> greater_equal
        | expression "<" expression -> less
        | expression ">" expression -> greater



    ?arithmetic_op: INTEGER_VALUE -> int_atomic_value
        | "-" arithmetic_op -> int_negation
        | arithmetic_op "+" arithmetic_op -> addition
        | arithmetic_op "-" arithmetic_op -> subtraction
        | arithmetic_op "*" arithmetic_op -> multiplication
        | arithmetic_op "/" arithmetic_op -> division

    ?boolean_e: BOOLEAN_VALUE -> bool_atomic_value
        | "non" boolean_e -> bool_negation
        | boolean_e "et" boolean_e -> conjunction
        | boolean_e "ou" boolean_e -> disjunction

    ?string_e: TEXT_VALUE -> string_atomic_value
        | string_e "+" string_e -> concat
        | "taille" string_e -> size
        | string_e "[" arithmetic_op "]" -> index

    ?list_e:  "[]" -> list_bc //basis case
        | "[" sequence "]" -> list_gc //general case
        | "[" arithmetic_op ":" arithmetic_op "]" -> range_list
        | list_e "+" list_e -> concat_list
        | list_e "["arithmetic_op"]" -> index_list
        | "taille" list_e -> size_list
        | "ajouter" expression "dans" list_e -> add

    ?sequence: expression ("," expression)*

  //  ?boolean: expression ("<" | ">" | "<=" | ">=") expression -> comparison
  //      | "non" boolean -> not

    ?variable: IDENTIFIER


// Tokens (type has a priority over identifier)
TYPE.1: /entier|texte|liste|booléen/

PRINT: "afficher"

IDENTIFIER: /[_a-zA-Zé][\wé_]*/
TEXT_VALUE.1: /"[^"]*"/
INTEGER_VALUE.1: /(0)|((-)?[1-9][0-9]*)/
BOOLEAN_VALUE.1: /faux|vrai/

DELIMITER: ";"

%ignore "#"
%ignore "\n"
%ignore " "
