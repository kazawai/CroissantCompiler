?start: statement+

    ?statement: assignment DELIMITER -> assignment
        | condition DELIMITER -> condition
        | loop DELIMITER -> loop
        | expression DELIMITER -> expression
        | PRINT expression DELIMITER -> print
        
    ?assignment: TYPE IDENTIFIER "=" expression -> initialization
        | TYPE IDENTIFIER -> declaration

    ?expression: arithmetic_op -> arithmetic_op
        | comparison -> comparison
        | variable -> variable
        | TEXT_VALUE -> string
        | INTEGER_VALUE -> integer
        | BOOLEAN_VALUE -> boolean 

    ?block: "{" statement* "}"

    ?condition: "si" boolean_e "alors" block ("sinon" block)? -> if_else

    ?loop: "tant" "que" boolean_e "faire" block -> while
        | "pour" "chaque" TYPE IDENTIFIER "dans" expression "faire" block -> for

    ?comparison: expression ("vaut" | "==") expression -> equals
        | expression ("ne vaut pas" | "!=") expression -> not_equals

    ?arithmetic_op: expression "+" expression -> addition
        | expression "-" expression -> subtraction
        | expression "*" expression -> multiplication
        | expression "/" expression -> division

    ?boolean_e: boolean ("et" | "ou") boolean -> and_or

    ?boolean: expression ("<" | ">" | "<=" | ">=") expression -> comparison
        | "non" boolean -> not

    ?variable: IDENTIFIER


// Tokens (type has a priority over identifier)
TYPE.1: /entier|texte|liste|booléen/

PRINT: "afficher"

IDENTIFIER: /[_a-zA-Zé][\wé_]*/
TEXT_VALUE: /".*"/
INTEGER_VALUE: /(-)?[1-9][0-9]*/
BOOLEAN_VALUE: /faux|vrai/

DELIMITER: ";"

COMMENT: "#" /[^\n]/*
%ignore COMMENT 
%ignore " "
