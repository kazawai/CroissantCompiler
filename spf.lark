?start: statement* -> interpret

    ?statement: assignment DELIMITER
        | condition
        | loop
        | expression DELIMITER
        | display DELIMITER

    ?assignment: TYPE IDENTIFIER "=" expression -> initialization
        | declaration
        | IDENTIFIER "=" expression -> modification

    ?declaration: TYPE IDENTIFIER -> declaration

    ?expression: comparison
        | arithmetic_op
        | string_e
        | boolean_e
        | list_e
        | variable

    ?block: "{" statement* "}" -> block

    ?condition: "si" (boolean_e | comparison | variable) "alors" block -> cond_if
        | "si" (boolean_e | comparison | variable) "alors" block "sinon" block -> cond_if_else

    ?loop: "tant" "que" (boolean_e | comparison | variable) "faire" block -> while
        | "pour" "chaque" declaration "dans" (string_e|list_e|variable) "faire" block -> for

    ?comparison: expression ("vaut" | "==") expression -> equals
        | expression ("ne vaut pas" | "!=") expression -> not_equal
        | expression "<=" expression -> less_equal
        | expression ">=" expression -> greater_equal
        | expression "<" expression -> less
        | expression ">" expression -> greater

    ?arithmetic_op: INTEGER_VALUE -> int_atomic_value
        | "-" expression -> int_negation
        | expression "+" expression -> addition
        | expression "-" expression -> subtraction
        | expression "*" expression -> multiplication
        | expression "/" expression -> division

    ?boolean_e: bool_atomic_value
        | "non" (bool_atomic_value|variable) -> bool_negation
        | expression "et" expression -> conjunction
        | expression "ou" expression -> disjunction
        ?bool_atomic_value: BOOLEAN_VALUE -> bool_atomic_value

    ?string_e: TEXT_VALUE -> string_atomic_value

    ?list_e: list_bc //basis case
        | list_gc //general case
        | range_list
        | (list_bc|list_gc|range_list|variable) "["expression"]" -> index_list
        | "taille" (list_bc|list_gc|range_list|variable) -> size_list
        | "ajouter" expression "dans" (IDENTIFIER | list_e) -> add
        ?list_bc: "[]" -> list_bc
        ?list_gc: "[" sequence "]" -> list_gc
        ?range_list: "[" expression ":" expression "]" -> range_list

    ?sequence: expression ("," expression)*

    ?variable: IDENTIFIER -> call

    ?display: PRINT expression -> print
        | PRINT expression "," expression ("," expression)* -> print_seq


// Tokens (type has a priority over identifier)
TYPE.1: /entier|texte|liste|booléen/

PRINT: "afficher"

IDENTIFIER: /[_a-zA-Zé][\wé_]*/
TEXT_VALUE.1: /"[^"]*"/
INTEGER_VALUE.1: /(0)|((-)?[1-9][0-9]*)/
BOOLEAN_VALUE.1: /faux|vrai/

DELIMITER: ";"
// Comments are like python comments
COMMENT: /#[^\n]*/

// Ignore spaces, tabs, newlines and comments
%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_JOIN
%ignore /\s+/
%ignore COMMENT
