?start: statement* -> interpret

    ?statement: assignment DELIMITER
        | condition
        | loop
        | expression DELIMITER
        | instructions DELIMITER

    ?assignment: TYPE IDENTIFIER "=" expression -> initialization
        | declaration
        | IDENTIFIER "=" expression -> modification

    ?declaration: TYPE IDENTIFIER -> declaration

    ?expression: comparison
        | arithmetic_e
        | string_e
        | boolean_e
        | list_e
        | variable
        | "(" expression ")"

    ?block: "{" statement* "}" -> block

    ?condition: "si" (boolean_e | comparison | variable) "alors" block -> cond_if
        | "si" (boolean_e | comparison | variable) "alors" block "sinon" block -> cond_if_else

    ?loop: "tant" "que" (boolean_e | comparison | variable) "faire" block -> while
        | "pour" "chaque" declaration "dans" (string_e|list_e|variable) "faire" block -> for

    ?comparison: expression ("vaut" | "==") expression -> equals
        | expression ("ne vaut pas" | "!=") expression -> not_equal
        | expression "<=" expression -> less_equal
        | expression ">=" expression -> greater_equal
        | expression "<" expression -> less
        | expression ">" expression -> greater

    ?arithmetic_e: (arithmetic_e|variable|list_e) "+" (term|variable|string_e|list_e) -> addition
        | (arithmetic_e|variable|list_access) "-" (term|variable|list_access) -> subtraction
        | term

        ?term: (term|variable|list_access) "*" (factor|variable|list_access) -> multiplication
            | (term|variable|list_access) "/" (factor|variable|list_access) -> division
            | factor

        ?factor: "-" (factor|variable|list_access) -> int_negation
            | INTEGER_VALUE -> int_atomic_value

    ?boolean_e: bool "et" (boolean_e|variable) -> conjunction 
        | bool "ou" (boolean_e|variable) -> disjunction
        | bool
        
        ?bool: "non" (bool|variable) -> bool_negation
            | BOOLEAN_VALUE -> bool_atomic_value


    ?string_e: TEXT_VALUE -> string_atomic_value

    ?list_e: list_bc //basis case
        | list_gc //general case
        | range_list
        | list_access
        | "taille" (list_bc|list_gc|range_list|variable) -> size_list
        ?list_bc: "[]" -> list_bc
        ?list_gc: "[" sequence "]" -> list_gc
        ?range_list: "[" expression ":" expression "]" -> range_list

    ?list_access: (list_bc|list_gc|range_list|variable) "["expression"]" -> index_list

    ?sequence: expression ("," expression)*

    ?variable: IDENTIFIER -> call

    ?instructions: PRINT expression -> print
        | PRINT expression "," expression ("," expression)* -> print_seq
        | "ajouter" expression "dans" (IDENTIFIER) -> add



// Tokens (type has a priority over identifier)
TYPE.1: /entier|texte|liste|booléen/

PRINT: "afficher"

IDENTIFIER: /[_a-zA-Zé][\wé_]*/
TEXT_VALUE.1: /"[^"]*"/
INTEGER_VALUE.1: /(0)|((-)?[1-9][0-9]*)/
BOOLEAN_VALUE.1: /faux|vrai/

DELIMITER: ";"
// Comments are like python comments
COMMENT: /#[^\n]*/

// Ignore spaces, tabs, newlines and comments
%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_JOIN
%ignore /\s+/
%ignore COMMENT
